{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"../constants\"; //check if user is registered then enable them to login to application\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:5000/api/users/register\", userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const getCurrentUser = () => dispatch => {\n  axios.get(\"http://localhost:5000/api/users/\").then(res => dispatch(setCurrentUser(res.data)));\n};\nexport const setCurrentUser = data => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: data\n  };\n};","map":{"version":3,"sources":["/Users/deethegreat/Desktop/2020-Coding-Content/Twitter-MERN-Clone/twitter-clone/client/src/actions/authActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","getCurrentUser","get","setCurrentUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,cAA7C,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DN,EAAAA,KAAK,CACFO,IADH,CACQ,0CADR,EACoDH,QADpD,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEZ,UADC;AAEPa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM;AAYP,OAAO,MAAMC,cAAc,GAAG,MAAMX,QAAQ,IAAI;AAC9CN,EAAAA,KAAK,CACFkB,GADH,CACO,kCADP,EAEGV,IAFH,CAEQC,GAAG,IAAIH,QAAQ,CAACa,cAAc,CAACV,GAAG,CAACO,IAAL,CAAf,CAFvB;AAGD,CAJM;AAMP,OAAO,MAAMG,cAAc,GAAGH,IAAI,IAAI;AACpC,SAAO;AACLH,IAAAA,IAAI,EAAEX,gBADD;AAELY,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"../constants\";\n\n//check if user is registered then enable them to login to application\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"http://localhost:5000/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\nexport const getCurrentUser = () => dispatch => {\n  axios\n    .get(\"http://localhost:5000/api/users/\")\n    .then(res => dispatch(setCurrentUser(res.data)));\n};\n\nexport const setCurrentUser = data => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: data\n  };\n};\n"]},"metadata":{},"sourceType":"module"}