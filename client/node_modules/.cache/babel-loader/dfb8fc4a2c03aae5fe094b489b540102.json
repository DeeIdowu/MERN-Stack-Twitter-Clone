{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"../constants\";\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http:/localhost:5000/api/users/login\", userData).then(res => {\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token);\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //check if user is registered then enable them to login to application\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:5000/api/users/register\", userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const getCurrentUser = () => dispatch => {\n  axios.get(\"http://localhost:5000/api/users/\").then(res => dispatch(setCurrentUser(res.data)));\n};\nexport const setCurrentUser = data => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: data\n  };\n};","map":{"version":3,"sources":["/Users/deethegreat/Desktop/2020-Coding-Content/Twitter-MERN-Clone/twitter-clone/client/src/actions/authActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","loginUser","userData","dispatch","post","then","res","token","data","localStorage","setItem","catch","err","type","payload","response","registerUser","history","push","getCurrentUser","get","setCurrentUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,cAA7C;AAEA,OAAO,MAAMC,SAAS,GAAGC,QAAQ,IAAIC,QAAQ,IAAI;AAC/CL,EAAAA,KAAK,CACFM,IADH,CACQ,sCADR,EACgDF,QADhD,EAEGG,IAFH,CAEQC,GAAG,IAAI;AACX,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACD,GALH,EAMGI,KANH,CAMSC,GAAG,IAAI;AACZT,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEd,UADC;AAEPe,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaP;AAFf,KAAD,CAAR;AAID,GAXH;AAYD,CAbM,C,CAeP;;AACA,OAAO,MAAMQ,YAAY,GAAG,CAACd,QAAD,EAAWe,OAAX,KAAuBd,QAAQ,IAAI;AAC7DL,EAAAA,KAAK,CACFM,IADH,CACQ,0CADR,EACoDF,QADpD,EAEGG,IAFH,CAEQC,GAAG,IAAIW,OAAO,CAACC,IAAR,CAAa,QAAb,CAFf,EAGGP,KAHH,CAGSC,GAAG,IACRT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaP;AAFf,GAAD,CAJZ;AASD,CAVM;AAYP,OAAO,MAAMW,cAAc,GAAG,MAAMhB,QAAQ,IAAI;AAC9CL,EAAAA,KAAK,CACFsB,GADH,CACO,kCADP,EAEGf,IAFH,CAEQC,GAAG,IAAIH,QAAQ,CAACkB,cAAc,CAACf,GAAG,CAACE,IAAL,CAAf,CAFvB;AAGD,CAJM;AAMP,OAAO,MAAMa,cAAc,GAAGb,IAAI,IAAI;AACpC,SAAO;AACLK,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"../constants\";\n\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"http:/localhost:5000/api/users/login\", userData)\n    .then(res => {\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\n//check if user is registered then enable them to login to application\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"http://localhost:5000/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\nexport const getCurrentUser = () => dispatch => {\n  axios\n    .get(\"http://localhost:5000/api/users/\")\n    .then(res => dispatch(setCurrentUser(res.data)));\n};\n\nexport const setCurrentUser = data => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: data\n  };\n};\n"]},"metadata":{},"sourceType":"module"}